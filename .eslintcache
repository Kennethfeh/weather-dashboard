[{"/Users/kennethfeh/projects/weather-dashboard/src/index.js":"1","/Users/kennethfeh/projects/weather-dashboard/src/reportWebVitals.js":"2","/Users/kennethfeh/projects/weather-dashboard/src/App.js":"3","/Users/kennethfeh/projects/weather-dashboard/src/components/CurrentWeather.js":"4","/Users/kennethfeh/projects/weather-dashboard/src/components/WindChart.js":"5","/Users/kennethfeh/projects/weather-dashboard/src/components/SearchBar.js":"6","/Users/kennethfeh/projects/weather-dashboard/src/components/ForecastCard.js":"7","/Users/kennethfeh/projects/weather-dashboard/src/components/TemperatureChart.js":"8","/Users/kennethfeh/projects/weather-dashboard/src/services/geolocationService.js":"9","/Users/kennethfeh/projects/weather-dashboard/src/components/ErrorMessage.js":"10","/Users/kennethfeh/projects/weather-dashboard/src/components/PrecipitationChart.js":"11","/Users/kennethfeh/projects/weather-dashboard/src/components/Loading.js":"12","/Users/kennethfeh/projects/weather-dashboard/src/services/weatherService.js":"13","/Users/kennethfeh/projects/weather-dashboard/src/utils/weatherUtils.js":"14"},{"size":499,"mtime":1756563895323,"results":"15","hashOfConfig":"16"},{"size":361,"mtime":1756563909979,"results":"17","hashOfConfig":"16"},{"size":5106,"mtime":1756563877610,"results":"18","hashOfConfig":"16"},{"size":4518,"mtime":1756563613181,"results":"19","hashOfConfig":"16"},{"size":4536,"mtime":1756563727510,"results":"20","hashOfConfig":"16"},{"size":2542,"mtime":1756563808909,"results":"21","hashOfConfig":"16"},{"size":4404,"mtime":1756563779286,"results":"22","hashOfConfig":"16"},{"size":2752,"mtime":1756563644597,"results":"23","hashOfConfig":"16"},{"size":2064,"mtime":1756563530777,"results":"24","hashOfConfig":"16"},{"size":836,"mtime":1756563833088,"results":"25","hashOfConfig":"16"},{"size":3023,"mtime":1756563677396,"results":"26","hashOfConfig":"16"},{"size":795,"mtime":1756563819813,"results":"27","hashOfConfig":"16"},{"size":2416,"mtime":1756563513143,"results":"28","hashOfConfig":"16"},{"size":2637,"mtime":1756563561843,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"gfezl6",{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kennethfeh/projects/weather-dashboard/src/index.js",[],"/Users/kennethfeh/projects/weather-dashboard/src/reportWebVitals.js",[],"/Users/kennethfeh/projects/weather-dashboard/src/App.js",[],"/Users/kennethfeh/projects/weather-dashboard/src/components/CurrentWeather.js",["62"],"import React from 'react';\nimport styled from 'styled-components';\nimport { WiHumidity, WiStrongWind, WiBarometer, WiThermometer } from 'react-icons/wi';\nimport { MdVisibility } from 'react-icons/md';\nimport { formatTemperature, getWeatherIcon, getWindDirection, formatFullDate } from '../utils/weatherUtils';\n\nconst WeatherCard = styled.div`\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  border-radius: 20px;\n  padding: 2rem;\n  color: white;\n  box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);\n  margin-bottom: 2rem;\n`;\n\nconst Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 2rem;\n`;\n\nconst Location = styled.div`\n  h2 {\n    font-size: 2rem;\n    margin: 0;\n    font-weight: 300;\n  }\n  \n  p {\n    margin: 0.5rem 0 0 0;\n    opacity: 0.9;\n    font-size: 0.9rem;\n  }\n`;\n\nconst DateTime = styled.div`\n  text-align: right;\n  opacity: 0.9;\n  font-size: 0.9rem;\n`;\n\nconst MainInfo = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 2rem;\n`;\n\nconst Temperature = styled.div`\n  display: flex;\n  align-items: center;\n  \n  .temp-value {\n    font-size: 4rem;\n    font-weight: 200;\n    margin-right: 1rem;\n  }\n  \n  .temp-details {\n    display: flex;\n    flex-direction: column;\n    \n    .feels-like {\n      font-size: 0.9rem;\n      opacity: 0.9;\n      margin-bottom: 0.5rem;\n    }\n    \n    .high-low {\n      display: flex;\n      gap: 1rem;\n      font-size: 0.9rem;\n      \n      span {\n        opacity: 0.9;\n      }\n    }\n  }\n`;\n\nconst WeatherInfo = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  \n  img {\n    width: 100px;\n    height: 100px;\n    filter: drop-shadow(0 0 10px rgba(255, 255, 255, 0.3));\n  }\n  \n  .description {\n    text-transform: capitalize;\n    font-size: 1.1rem;\n    margin-top: -10px;\n  }\n`;\n\nconst Details = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));\n  gap: 1.5rem;\n  padding-top: 1.5rem;\n  border-top: 1px solid rgba(255, 255, 255, 0.2);\n`;\n\nconst DetailItem = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  \n  .icon {\n    font-size: 1.5rem;\n    margin-bottom: 0.5rem;\n    opacity: 0.9;\n  }\n  \n  .label {\n    font-size: 0.8rem;\n    opacity: 0.7;\n    margin-bottom: 0.25rem;\n  }\n  \n  .value {\n    font-size: 1rem;\n    font-weight: 500;\n  }\n`;\n\nconst CurrentWeather = ({ weather, location }) => {\n  if (!weather) return null;\n\n  const { main, weather: weatherInfo, wind, visibility, sys, dt } = weather;\n  const { temp, feels_like, temp_min, temp_max, humidity, pressure } = main;\n\n  return (\n    <WeatherCard>\n      <Header>\n        <Location>\n          <h2>{location?.city || weather.name}</h2>\n          <p>{location?.country || sys.country}</p>\n        </Location>\n        <DateTime>{formatFullDate(dt)}</DateTime>\n      </Header>\n\n      <MainInfo>\n        <Temperature>\n          <span className=\"temp-value\">{formatTemperature(temp)}</span>\n          <div className=\"temp-details\">\n            <span className=\"feels-like\">Feels like {formatTemperature(feels_like)}</span>\n            <div className=\"high-low\">\n              <span>H: {formatTemperature(temp_max)}</span>\n              <span>L: {formatTemperature(temp_min)}</span>\n            </div>\n          </div>\n        </Temperature>\n\n        <WeatherInfo>\n          <img src={getWeatherIcon(weatherInfo[0].icon)} alt={weatherInfo[0].description} />\n          <span className=\"description\">{weatherInfo[0].description}</span>\n        </WeatherInfo>\n      </MainInfo>\n\n      <Details>\n        <DetailItem>\n          <WiHumidity className=\"icon\" />\n          <span className=\"label\">Humidity</span>\n          <span className=\"value\">{humidity}%</span>\n        </DetailItem>\n\n        <DetailItem>\n          <WiStrongWind className=\"icon\" />\n          <span className=\"label\">Wind</span>\n          <span className=\"value\">{Math.round(wind.speed * 3.6)} km/h {getWindDirection(wind.deg)}</span>\n        </DetailItem>\n\n        <DetailItem>\n          <WiBarometer className=\"icon\" />\n          <span className=\"label\">Pressure</span>\n          <span className=\"value\">{pressure} hPa</span>\n        </DetailItem>\n\n        <DetailItem>\n          <MdVisibility className=\"icon\" />\n          <span className=\"label\">Visibility</span>\n          <span className=\"value\">{(visibility / 1000).toFixed(1)} km</span>\n        </DetailItem>\n      </Details>\n    </WeatherCard>\n  );\n};\n\nexport default CurrentWeather;","/Users/kennethfeh/projects/weather-dashboard/src/components/WindChart.js",[],"/Users/kennethfeh/projects/weather-dashboard/src/components/SearchBar.js",[],"/Users/kennethfeh/projects/weather-dashboard/src/components/ForecastCard.js",[],"/Users/kennethfeh/projects/weather-dashboard/src/components/TemperatureChart.js",[],"/Users/kennethfeh/projects/weather-dashboard/src/services/geolocationService.js",["63"],"class GeolocationService {\n  getCurrentPosition() {\n    return new Promise((resolve, reject) => {\n      if (!navigator.geolocation) {\n        reject(new Error('Geolocation is not supported by your browser'));\n        return;\n      }\n\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          resolve({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude,\n            accuracy: position.coords.accuracy\n          });\n        },\n        (error) => {\n          let errorMessage;\n          switch (error.code) {\n            case error.PERMISSION_DENIED:\n              errorMessage = 'User denied the request for Geolocation.';\n              break;\n            case error.POSITION_UNAVAILABLE:\n              errorMessage = 'Location information is unavailable.';\n              break;\n            case error.TIMEOUT:\n              errorMessage = 'The request to get user location timed out.';\n              break;\n            default:\n              errorMessage = 'An unknown error occurred.';\n          }\n          reject(new Error(errorMessage));\n        },\n        {\n          enableHighAccuracy: true,\n          timeout: 10000,\n          maximumAge: 30000\n        }\n      );\n    });\n  }\n\n  async getCityFromCoordinates(lat, lon) {\n    try {\n      // Using OpenStreetMap's Nominatim API for reverse geocoding\n      const response = await fetch(\n        `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}`\n      );\n      const data = await response.json();\n      \n      return {\n        city: data.address?.city || data.address?.town || data.address?.village || 'Unknown',\n        state: data.address?.state || '',\n        country: data.address?.country || '',\n        displayName: data.display_name || ''\n      };\n    } catch (error) {\n      console.error('Error getting city from coordinates:', error);\n      return {\n        city: 'Unknown',\n        state: '',\n        country: '',\n        displayName: ''\n      };\n    }\n  }\n}\n\nexport default new GeolocationService();","/Users/kennethfeh/projects/weather-dashboard/src/components/ErrorMessage.js",[],"/Users/kennethfeh/projects/weather-dashboard/src/components/PrecipitationChart.js",[],"/Users/kennethfeh/projects/weather-dashboard/src/components/Loading.js",["64"],"import React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport Loader from 'react-loader-spinner';\n\nconst spin = keyframes`\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n`;\n\nconst LoadingContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 400px;\n  color: #667eea;\n`;\n\nconst LoadingText = styled.p`\n  margin-top: 1rem;\n  font-size: 1.1rem;\n  color: #666;\n`;\n\nconst Loading = ({ message = 'Loading weather data...' }) => {\n  return (\n    <LoadingContainer>\n      <Loader\n        type=\"TailSpin\"\n        color=\"#667eea\"\n        height={60}\n        width={60}\n      />\n      <LoadingText>{message}</LoadingText>\n    </LoadingContainer>\n  );\n};\n\nexport default Loading;","/Users/kennethfeh/projects/weather-dashboard/src/services/weatherService.js",["65"],"import axios from 'axios';\n\nconst API_KEY = process.env.REACT_APP_OPENWEATHER_API_KEY || 'demo';\nconst BASE_URL = 'https://api.openweathermap.org/data/2.5';\n\nclass WeatherService {\n  async getCurrentWeather(lat, lon) {\n    try {\n      const response = await axios.get(`${BASE_URL}/weather`, {\n        params: {\n          lat,\n          lon,\n          appid: API_KEY,\n          units: 'metric'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching current weather:', error);\n      throw error;\n    }\n  }\n\n  async getWeatherByCity(city) {\n    try {\n      const response = await axios.get(`${BASE_URL}/weather`, {\n        params: {\n          q: city,\n          appid: API_KEY,\n          units: 'metric'\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching weather by city:', error);\n      throw error;\n    }\n  }\n\n  async getForecast(lat, lon) {\n    try {\n      const response = await axios.get(`${BASE_URL}/forecast`, {\n        params: {\n          lat,\n          lon,\n          appid: API_KEY,\n          units: 'metric',\n          cnt: 40 // 5 days of 3-hour forecasts\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching forecast:', error);\n      throw error;\n    }\n  }\n\n  async getForecastByCity(city) {\n    try {\n      const response = await axios.get(`${BASE_URL}/forecast`, {\n        params: {\n          q: city,\n          appid: API_KEY,\n          units: 'metric',\n          cnt: 40\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching forecast by city:', error);\n      throw error;\n    }\n  }\n\n  async getAirQuality(lat, lon) {\n    try {\n      const response = await axios.get(`${BASE_URL}/air_pollution`, {\n        params: {\n          lat,\n          lon,\n          appid: API_KEY\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching air quality:', error);\n      // Return mock data if API fails\n      return {\n        list: [{\n          main: { aqi: 2 },\n          components: {\n            co: 233.65,\n            no: 0.01,\n            no2: 3.77,\n            o3: 75.86,\n            so2: 0.54,\n            pm2_5: 10.89,\n            pm10: 12.47,\n            nh3: 0.31\n          }\n        }]\n      };\n    }\n  }\n}\n\nexport default new WeatherService();","/Users/kennethfeh/projects/weather-dashboard/src/utils/weatherUtils.js",[],{"ruleId":"66","severity":1,"message":"67","line":3,"column":49,"nodeType":"68","messageId":"69","endLine":3,"endColumn":62},{"ruleId":"70","severity":1,"message":"71","line":69,"column":1,"nodeType":"72","endLine":69,"endColumn":41},{"ruleId":"66","severity":1,"message":"73","line":5,"column":7,"nodeType":"68","messageId":"69","endLine":5,"endColumn":11},{"ruleId":"70","severity":1,"message":"71","line":107,"column":1,"nodeType":"72","endLine":107,"endColumn":37},"no-unused-vars","'WiThermometer' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration","'spin' is assigned a value but never used."]